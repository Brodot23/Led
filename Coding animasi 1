#include <MD_MAX72xx.h>
#include <SPI.h>

// Define hardware interface and display parameters
#define HARDWARE_TYPE MD_MAX72XX::FC16_HW   // Set for your matrix type
#define MAX_DEVICES 4                        // 4 modules for 32x8 display
#define CLK_PIN   14  // or SCK  (D5)
#define DATA_PIN  13  // or MOSI (D7)
#define CS_PIN    15  // or SS   (D8)

// Create display object
MD_MAX72XX mx = MD_MAX72XX(HARDWARE_TYPE, DATA_PIN, CLK_PIN, CS_PIN, MAX_DEVICES);

// Animation delay
#define ANIMATION_DELAY 50

// Display dimensions
#define MAX_COL 32
#define MAX_ROW 8

void setup() {
  mx.begin();
  mx.control(MD_MAX72XX::INTENSITY, 8); // Set brightness (0-15)
  mx.clear();
}

// Animation patterns and helper functions
void bouncing_ball() {
  static int8_t x = 0;
  static int8_t y = 0;
  static int8_t dx = 1;
  static int8_t dy = 1;
  
  mx.clear();
  mx.setPoint(y, x, true);
  
  x += dx;
  y += dy;
  
  if (x >= MAX_COL-1 || x <= 0) dx *= -1;
  if (y >= MAX_ROW-1 || y <= 0) dy *= -1;
}

void expanding_circles() {
  static uint8_t radius = 0;
  int centerX = MAX_COL/2;
  int centerY = MAX_ROW/2;
  
  mx.clear();
  for(int y = 0; y < MAX_ROW; y++) {
    for(int x = 0; x < MAX_COL; x++) {
      if(((x-centerX)*(x-centerX) + (y-centerY)*(y-centerY)) <= (radius*radius)) {
        mx.setPoint(y, x, true);
      }
    }
  }
  radius++;
  if(radius > 8) radius = 0;
}

void rain() {
  static uint8_t drops[MAX_COL];
  
  // Move drops down
  for(int i = 0; i < MAX_COL; i++) {
    if(drops[i] > 0) {
      mx.setPoint(drops[i]-1, i, false);
      drops[i]++;
      if(drops[i] <= MAX_ROW) {
        mx.setPoint(drops[i]-1, i, true);
      } else {
        drops[i] = 0;
      }
    } else if(random(20) == 0) {
      drops[i] = 1;
    }
  }
}

void wave_pattern() {
  static uint8_t phase = 0;
  
  mx.clear();
  for(int x = 0; x < MAX_COL; x++) {
    int y = (MAX_ROW/2) + sin((x + phase) * 0.3) * 3;
    if(y >= 0 && y < MAX_ROW) {
      mx.setPoint(y, x, true);
    }
  }
  phase++;
}

void spiral() {
  static uint8_t angle = 0;
  int centerX = MAX_COL/2;
  int centerY = MAX_ROW/2;
  
  mx.clear();
  for(int i = 0; i < 16; i++) {
    int x = centerX + (i * cos(angle + i * 0.5));
    int y = centerY + (i * sin(angle + i * 0.5));
    if(x >= 0 && x < MAX_COL && y >= 0 && y < MAX_ROW) {
      mx.setPoint(y, x, true);
    }
  }
  angle += 0.2;
}

void starburst() {
  static uint8_t phase = 0;
  int centerX = MAX_COL/2;
  int centerY = MAX_ROW/2;
  
  mx.clear();
  for(int i = 0; i < 8; i++) {
    int length = 4 + sin(phase * 0.2) * 3;
    int x = centerX + length * cos(i * PI/4);
    int y = centerY + length * sin(i * PI/4);
    mx.setPoint(y, x, true);
  }
  phase++;
}

void random_sparkles() {
  for(int i = 0; i < 10; i++) {
    int x = random(MAX_COL);
    int y = random(MAX_ROW);
    mx.setPoint(y, x, random(2));
  }
}

void checkerboard() {
  static bool toggle = false;
  
  mx.clear();
  for(int y = 0; y < MAX_ROW; y++) {
    for(int x = 0; x < MAX_COL; x++) {
      if((x + y) % 2 == toggle) {
        mx.setPoint(y, x, true);
      }
    }
  }
  toggle = !toggle;
}

void scanner() {
  static int pos = 0;
  static int direction = 1;
  
  mx.clear();
  for(int i = 0; i < MAX_ROW; i++) {
    mx.setPoint(i, pos, true);
  }
  
  pos += direction;
  if(pos >= MAX_COL-1 || pos <= 0) direction *= -1;
}

void double_bouncing_balls() {
  static int8_t x1 = 0, y1 = 0, x2 = MAX_COL-1, y2 = MAX_ROW-1;
  static int8_t dx1 = 1, dy1 = 1, dx2 = -1, dy2 = -1;
  
  mx.clear();
  mx.setPoint(y1, x1, true);
  mx.setPoint(y2, x2, true);
  
  x1 += dx1; y1 += dy1;
  x2 += dx2; y2 += dy2;
  
  if (x1 >= MAX_COL-1 || x1 <= 0) dx1 *= -1;
  if (y1 >= MAX_ROW-1 || y1 <= 0) dy1 *= -1;
  if (x2 >= MAX_COL-1 || x2 <= 0) dx2 *= -1;
  if (y2 >= MAX_ROW-1 || y2 <= 0) dy2 *= -1;
}

void snake_pattern() {
  static uint8_t snakeX[32];
  static uint8_t snakeY[32];
  static uint8_t snakeLength = 5;
  static int8_t dx = 1, dy = 0;
  
  mx.clear();
  
  // Move snake body
  for(int i = snakeLength-1; i > 0; i--) {
    snakeX[i] = snakeX[i-1];
    snakeY[i] = snakeY[i-1];
  }
  
  // Move head
  snakeX[0] += dx;
  snakeY[0] += dy;
  
  // Wrap around
  if(snakeX[0] >= MAX_COL) snakeX[0] = 0;
  if(snakeX[0] < 0) snakeX[0] = MAX_COL-1;
  if(snakeY[0] >= MAX_ROW) snakeY[0] = 0;
  if(snakeY[0] < 0) snakeY[0] = MAX_ROW-1;
  
  // Change direction randomly
  if(random(10) == 0) {
    if(dx != 0) {
      dx = 0;
      dy = (random(2) * 2 - 1);
    } else {
      dy = 0;
      dx = (random(2) * 2 - 1);
    }
  }
  
  // Draw snake
  for(int i = 0; i < snakeLength; i++) {
    mx.setPoint(snakeY[i], snakeX[i], true);
  }
}

void fireworks() {
  static int8_t fx = -1, fy = -1;
  static uint8_t fstage = 0;
  
  if(fx == -1) {
    fx = random(MAX_COL);
    fy = MAX_ROW-1;
    fstage = 0;
  }
  
  mx.clear();
  
  if(fstage < 8) {
    // Rising
    mx.setPoint(fy, fx, true);
    fy--;
    if(fy < 2) fstage = 8;
  } else if(fstage < 16) {
    // Explosion
    int radius = (fstage - 8) / 2;
    for(int i = 0; i < 8; i++) {
      int x = fx + radius * cos(i * PI/4);
      int y = fy + radius * sin(i * PI/4);
      if(x >= 0 && x < MAX_COL && y >= 0 && y < MAX_ROW) {
        mx.setPoint(y, x, true);
      }
    }
    fstage++;
  } else {
    fx = -1; // Reset
  }
}

void falling_stars() {
  static uint8_t stars[5][2];  // [x,y] for 5 stars
  static bool star_active[5] = {false, false, false, false, false};
  
  mx.clear();
  
  for(int i = 0; i < 5; i++) {
    if(!star_active[i] && random(20) == 0) {
      stars[i][0] = random(MAX_COL);
      stars[i][1] = 0;
      star_active[i] = true;
    }
    
    if(star_active[i]) {
      mx.setPoint(stars[i][1], stars[i][0], true);
      stars[i][1]++;
      
      if(stars[i][1] >= MAX_ROW) {
        star_active[i] = false;
      }
    }
  }
}

void rotating_lines() {
  static float angle = 0;
  int centerX = MAX_COL/2;
  int centerY = MAX_ROW/2;
  
  mx.clear();
  
  for(int i = 0; i < 4; i++) {
    float currentAngle = angle + (i * PI/2);
    int x = centerX + 6 * cos(currentAngle);
    int y = centerY + 6 * sin(currentAngle);
    mx.setPoint(y, x, true);
    mx.setPoint(centerY, centerX, true);
  }
  
  angle += 0.2;
}

void expanding_squares() {
  static uint8_t size = 0;
  static bool expanding = true;
  int centerX = MAX_COL/2;
  int centerY = MAX_ROW/2;
  
  mx.clear();
  
  for(int i = -size; i <= size; i++) {
    for(int j = -size; j <= size; j++) {
      if(abs(i) == size || abs(j) == size) {
        int x = centerX + i;
        int y = centerY + j;
        if(x >= 0 && x < MAX_COL && y >= 0 && y < MAX_ROW) {
          mx.setPoint(y, x, true);
        }
      }
    }
  }
  
  if(expanding) {
    size++;
    if(size >= 4) expanding = false;
  } else {
    size--;
    if(size == 0) expanding = true;
  }
}

void zigzag_pattern() {
  static uint8_t pos = 0;
  static bool up = true;
  
  mx.clear();
  
  for(int i = 0; i < MAX_COL; i++) {
    int y = (i % 2 == 0) ? pos : (MAX_ROW-1 - pos);
    mx.setPoint(y, i, true);
  }
  
  if(up) {
    pos++;
    if(pos >= MAX_ROW-1) up = false;
  } else {
    pos--;
    if(pos == 0) up = true;
  }
}

void random_walk() {
  static int8_t x = MAX_COL/2;
  static int8_t y = MAX_ROW/2;
  
  // Add new position
  if(x >= 0 && x < MAX_COL && y >= 0 && y < MAX_ROW) {
    mx.setPoint(y, x, true);
  }
  
  // Random movement
  x += random(3) - 1;  // -1, 0, or 1
  y += random(3) - 1;
  
  // Keep within bounds
  x = constrain(x, 0, MAX_COL-1);
  y = constrain(y, 0, MAX_ROW-1);
}

void pulsing_circles() {
  static uint8_t phase = 0;
  static bool expanding = true;
  int centerX = MAX_COL/2;
  int centerY = MAX_ROW/2;
  
  mx.clear();
  
  for(int i = 0; i <= phase; i += 2) {
    for(int x = 0; x < MAX_COL; x++) {
      for(int y = 0; y < MAX_ROW; y++) {
        if(round(sqrt(pow(x-centerX, 2) + pow(y-centerY, 2))) == i) {
          mx.setPoint(y, x, true);
        }
      }
    }
  }
  
  if(expanding) {
    phase++;
    if(phase >= 8) expanding = false;
  } else {
    phase--;
    if(phase == 0) expanding = true;
  }
}

void diagonal_wipe() {
  static int8_t line = -MAX_COL;
  static bool forward = true;
  
  mx.clear();
  
  for(int x = 0; x < MAX_COL; x++) {
    for(int y = 0; y < MAX_ROW; y++) {
      if(x + y == line + MAX_COL) {
        mx.setPoint(y, x, true);
      }
    }
  }
  
  if(forward) {
    line++;
    if(line >= MAX_COL) forward = false;
  } else {
    line--;
    if(line <= -MAX_COL) forward = true;
  }
}

void corner_fill() {
  static uint8_t stage = 0;
  static uint8_t corner = 0;
  
  if(stage == 0) {
    mx.clear();
  }
  
  int startX = (corner & 1) ? MAX_COL-1 : 0;
  int startY = (corner & 2) ? MAX_ROW-1 : 0;
  int dirX = (corner & 1) ? -1 : 1;
  int dirY = (corner & 2) ? -1 : 1;
  
  for(int i = 0; i <= stage; i++) {
    int x = startX + (dirX * i);
    if(x >= 0 && x < MAX_COL) {
      for(int j = 0; j <= stage; j++) {
        int y = startY + (dirY * j);
        if(y >= 0 && y < MAX_ROW) {
          mx.setPoint(y, x, true);
        }
      }
    }
  }
  
  stage++;
  if(stage >= 8) {
    stage = 0;
    corner = (corner + 1) % 4;
  }
}

void spinning_windmill() {
  static float angle = 0;
  int centerX = MAX_COL/2;
  int centerY = MAX_ROW/2;
  
  mx.clear();
  
  for(int i = 0; i < 4; i++) {
    float currentAngle = angle + (i * PI/2);
    for(int r = 0; r < 8; r++) {
      int x = centerX + r * cos(currentAngle);
      int y = centerY + r * sin(currentAngle);
      if(x >= 0 && x < MAX_COL && y >= 0 && y < MAX_ROW) {
        mx.setPoint(y, x, true);
      }
    }
  }
  
  angle += 0.2;
}

void diamond_pattern() {
  static uint8_t offset = 0;
  
  mx.clear();
  
  for(int i = 0; i < MAX_COL; i += 4) {
    for(int j = 0; j < MAX_ROW; j += 4) {
      int x = (i + offset) % MAX_COL;
      int y = (j + offset) % MAX_ROW;
      mx.setPoint(y, x, true);
      if(x+1 < MAX_COL) mx.setPoint(y, x+1, true);
      if(y+1 < MAX_ROW) mx.setPoint(y+1, x, true);
    }
  }
  
  offset = (offset + 1) % 4;
}

void alternating_columns() {
  static bool toggle = false;
  static uint8_t offset = 0;
  
  mx.clear();
  
  for(int x = 0; x < MAX_COL; x++) {
    if((x + offset) % 2 == 0) {
      for(int y = 0; y < MAX_ROW; y++) {
        mx.setPoint(y, x, toggle);
      }
    } else {
      for(int y = 0; y < MAX_ROW; y++) {
        mx.setPoint(y, x, !toggle);
      }
    }
  }
  
  offset++;
  if(offset >= 2) {
    offset = 0;
    toggle = !toggle;
  }
}

void bounce_and_split() {
  static int8_t x = 0;
  static int8_t dx = 1;
  static uint8_t split = 0;
  
  mx.clear();
  
  for(int i = 0; i <= split; i++) {
    int y1 = (MAX_ROW/2) - i;
    int y2 = (MAX_ROW/2) + i;
    if(y1 >= 0) mx.setPoint(y1, x, true);
    if(y2 < MAX_ROW) mx.setPoint(y2, x, true);
  }
  
  x += dx;
  
  if(x >= MAX_COL-1) {
    dx = -1;
    split = min(split + 1, MAX_ROW/2);
  } else if(x <= 0) {
    dx = 1;
    split = min(split + 1, MAX_ROW/2);
  }
}

void rotating_triangles() {
  static float angle = 0;
  int centerX = MAX_COL/2;
  int centerY = MAX_ROW/2;
  
  mx.clear();
  
  for(int i = 0; i < 3; i++) {
    float currentAngle = angle + (i * 2*PI/3);
    int x = centerX + 4 * cos(currentAngle);
    int y = centerY + 4 * sin(currentAngle);
    if(x >= 0 && x < MAX_COL && y >= 0 && y < MAX_ROW) {
      mx.setPoint(y, x, true);
    }
  }
  
  angle += 0.2;
}

void matrix_rain() {
  static uint8_t drops[MAX_COL];
  static bool active[MAX_COL];
  
  for(int i = 0; i < MAX_COL; i++) {
    if(!active[i] && random(10) == 0) {
      active[i] = true;
      drops[i] = 0;
    }
    
    if(active[i]) {
      if(drops[i] > 0) mx.setPoint(drops[i]-1, i, false);
      if(drops[i] < MAX_ROW) mx.setPoint(drops[i], i, true);
      drops[i]++;
      if(drops[i] >= MAX_ROW + 1) active[i] = false;
    }
  }
}

void crosshatch() {
  static uint8_t phase = 0;
  
  mx.clear();
  
  // Vertical lines
  for(int x = phase % 4; x < MAX_COL; x += 4) {
    for(int y = 0; y < MAX_ROW; y++) {
      mx.setPoint(y, x, true);
    }
  }
  
  // Horizontal lines
  for(int y = ((phase + 2) % 4); y < MAX_ROW; y += 4) {
    for(int x = 0; x < MAX_COL; x++) {
      mx.setPoint(y, x, true);
    }
  }
  
  phase = (phase + 1) % 4;
}

void spinning_spiral() {
  static float angle = 0;
  static uint8_t length = 0;
  int centerX = MAX_COL/2;
  int centerY = MAX_ROW/2;
  
  mx.clear();
  
  for(int i = 0; i < length; i++) {
    float currentAngle = angle + (i * 0.5);
    int x = centerX + i * cos(currentAngle) / 2;
    int y = centerY + i * sin(currentAngle) / 2;
    if(x >= 0 && x < MAX_COL && y >= 0 && y < MAX_ROW) {
      mx.setPoint(y, x, true);
    }
  }
  
  angle += 0.2;
  length = (length + 1) % 16;
}

void exploding_pixels() {
  static uint8_t stage = 0;
  static uint8_t pixels[8][2];  // Store positions of 8 pixels
  
  if(stage == 0) {
    // Initialize pixels at center
    for(int i = 0; i < 8; i++) {
      pixels[i][0] = MAX_COL/2;
      pixels[i][1] = MAX_ROW/2;
    }
  }
  
  mx.clear();
  
  // Move pixels outward
  for(int i = 0; i < 8; i++) {
    float angle = i * PI/4;
    pixels[i][0] = MAX_COL/2 + (stage * cos(angle));
    pixels[i][1] = MAX_ROW/2 + (stage * sin(angle));
    
    if(pixels[i][0] >= 0 && pixels[i][0] < MAX_COL && 
       pixels[i][1] >= 0 && pixels[i][1] < MAX_ROW) {
      mx.setPoint(pixels[i][1], pixels[i][0], true);
    }
  }
  
  stage++;
  if(stage >= 8) stage = 0;
}

void loop() {
  static uint8_t currentAnimation = 0;
  static unsigned long lastChange = 0;
  
  if(millis() - lastChange > 3000) { // Change animation every 3 seconds
    currentAnimation = (currentAnimation + 1) % 30; // Cycle through all 30 animations
    lastChange = millis();
    mx.clear();
  }
  
  switch(currentAnimation) {
    case 0: bouncing_ball(); break;
    case 1: expanding_circles(); break;
    case 2: rain(); break;
    case 3: wave_pattern(); break;
    case 4: spiral(); break;
    case 5: starburst(); break;
    case 6: random_sparkles(); break;
    case 7: checkerboard(); break;
    case 8: scanner(); break;
    case 9: wave_pattern(); break;
    case 10: double_bouncing_balls(); break;
    case 11: snake_pattern(); break;
    case 12: fireworks(); break;
    case 13: falling_stars(); break;
    case 14: rotating_lines(); break;
    case 15: expanding_squares(); break;
    case 16: zigzag_pattern(); break;
    case 17: random_walk(); break;
    case 18: pulsing_circles(); break;
    case 19: diagonal_wipe(); break;
    case 20: corner_fill(); break;
    case 21: spinning_windmill(); break;
    case 22: diamond_pattern(); break;
    case 23: alternating_columns(); break;
    case 24: bounce_and_split(); break;
    case 25: rotating_triangles(); break;
    case 26: matrix_rain(); break;
    case 27: crosshatch(); break;
    case 28: spinning_spiral(); break;
    case 29: exploding_pixels(); break;
  }
  
  delay(ANIMATION_DELAY);
}#include <MD_MAX72xx.h>
#include <SPI.h>

// Define hardware interface and display parameters
#define HARDWARE_TYPE MD_MAX72XX::FC16_HW   // Set for your matrix type
#define MAX_DEVICES 4                        // 4 modules for 32x8 display
#define CLK_PIN   14  // or SCK  (D5)
#define DATA_PIN  13  // or MOSI (D7)
#define CS_PIN    15  // or SS   (D8)

// Create display object
MD_MAX72XX mx = MD_MAX72XX(HARDWARE_TYPE, DATA_PIN, CLK_PIN, CS_PIN, MAX_DEVICES);

// Animation delay
#define ANIMATION_DELAY 50

// Display dimensions
#define MAX_COL 32
#define MAX_ROW 8

void setup() {
  mx.begin();
  mx.control(MD_MAX72XX::INTENSITY, 8); // Set brightness (0-15)
  mx.clear();
}

// Animation patterns and helper functions
void bouncing_ball() {
  static int8_t x = 0;
  static int8_t y = 0;
  static int8_t dx = 1;
  static int8_t dy = 1;
  
  mx.clear();
  mx.setPoint(y, x, true);
  
  x += dx;
  y += dy;
  
  if (x >= MAX_COL-1 || x <= 0) dx *= -1;
  if (y >= MAX_ROW-1 || y <= 0) dy *= -1;
}

void expanding_circles() {
  static uint8_t radius = 0;
  int centerX = MAX_COL/2;
  int centerY = MAX_ROW/2;
  
  mx.clear();
  for(int y = 0; y < MAX_ROW; y++) {
    for(int x = 0; x < MAX_COL; x++) {
      if(((x-centerX)*(x-centerX) + (y-centerY)*(y-centerY)) <= (radius*radius)) {
        mx.setPoint(y, x, true);
      }
    }
  }
  radius++;
  if(radius > 8) radius = 0;
}

void rain() {
  static uint8_t drops[MAX_COL];
  
  // Move drops down
  for(int i = 0; i < MAX_COL; i++) {
    if(drops[i] > 0) {
      mx.setPoint(drops[i]-1, i, false);
      drops[i]++;
      if(drops[i] <= MAX_ROW) {
        mx.setPoint(drops[i]-1, i, true);
      } else {
        drops[i] = 0;
      }
    } else if(random(20) == 0) {
      drops[i] = 1;
    }
  }
}

void wave_pattern() {
  static uint8_t phase = 0;
  
  mx.clear();
  for(int x = 0; x < MAX_COL; x++) {
    int y = (MAX_ROW/2) + sin((x + phase) * 0.3) * 3;
    if(y >= 0 && y < MAX_ROW) {
      mx.setPoint(y, x, true);
    }
  }
  phase++;
}

void spiral() {
  static uint8_t angle = 0;
  int centerX = MAX_COL/2;
  int centerY = MAX_ROW/2;
  
  mx.clear();
  for(int i = 0; i < 16; i++) {
    int x = centerX + (i * cos(angle + i * 0.5));
    int y = centerY + (i * sin(angle + i * 0.5));
    if(x >= 0 && x < MAX_COL && y >= 0 && y < MAX_ROW) {
      mx.setPoint(y, x, true);
    }
  }
  angle += 0.2;
}

void starburst() {
  static uint8_t phase = 0;
  int centerX = MAX_COL/2;
  int centerY = MAX_ROW/2;
  
  mx.clear();
  for(int i = 0; i < 8; i++) {
    int length = 4 + sin(phase * 0.2) * 3;
    int x = centerX + length * cos(i * PI/4);
    int y = centerY + length * sin(i * PI/4);
    mx.setPoint(y, x, true);
  }
  phase++;
}

void random_sparkles() {
  for(int i = 0; i < 10; i++) {
    int x = random(MAX_COL);
    int y = random(MAX_ROW);
    mx.setPoint(y, x, random(2));
  }
}

void checkerboard() {
  static bool toggle = false;
  
  mx.clear();
  for(int y = 0; y < MAX_ROW; y++) {
    for(int x = 0; x < MAX_COL; x++) {
      if((x + y) % 2 == toggle) {
        mx.setPoint(y, x, true);
      }
    }
  }
  toggle = !toggle;
}

void scanner() {
  static int pos = 0;
  static int direction = 1;
  
  mx.clear();
  for(int i = 0; i < MAX_ROW; i++) {
    mx.setPoint(i, pos, true);
  }
  
  pos += direction;
  if(pos >= MAX_COL-1 || pos <= 0) direction *= -1;
}

void double_bouncing_balls() {
  static int8_t x1 = 0, y1 = 0, x2 = MAX_COL-1, y2 = MAX_ROW-1;
  static int8_t dx1 = 1, dy1 = 1, dx2 = -1, dy2 = -1;
  
  mx.clear();
  mx.setPoint(y1, x1, true);
  mx.setPoint(y2, x2, true);
  
  x1 += dx1; y1 += dy1;
  x2 += dx2; y2 += dy2;
  
  if (x1 >= MAX_COL-1 || x1 <= 0) dx1 *= -1;
  if (y1 >= MAX_ROW-1 || y1 <= 0) dy1 *= -1;
  if (x2 >= MAX_COL-1 || x2 <= 0) dx2 *= -1;
  if (y2 >= MAX_ROW-1 || y2 <= 0) dy2 *= -1;
}

void snake_pattern() {
  static uint8_t snakeX[32];
  static uint8_t snakeY[32];
  static uint8_t snakeLength = 5;
  static int8_t dx = 1, dy = 0;
  
  mx.clear();
  
  // Move snake body
  for(int i = snakeLength-1; i > 0; i--) {
    snakeX[i] = snakeX[i-1];
    snakeY[i] = snakeY[i-1];
  }
  
  // Move head
  snakeX[0] += dx;
  snakeY[0] += dy;
  
  // Wrap around
  if(snakeX[0] >= MAX_COL) snakeX[0] = 0;
  if(snakeX[0] < 0) snakeX[0] = MAX_COL-1;
  if(snakeY[0] >= MAX_ROW) snakeY[0] = 0;
  if(snakeY[0] < 0) snakeY[0] = MAX_ROW-1;
  
  // Change direction randomly
  if(random(10) == 0) {
    if(dx != 0) {
      dx = 0;
      dy = (random(2) * 2 - 1);
    } else {
      dy = 0;
      dx = (random(2) * 2 - 1);
    }
  }
  
  // Draw snake
  for(int i = 0; i < snakeLength; i++) {
    mx.setPoint(snakeY[i], snakeX[i], true);
  }
}

void fireworks() {
  static int8_t fx = -1, fy = -1;
  static uint8_t fstage = 0;
  
  if(fx == -1) {
    fx = random(MAX_COL);
    fy = MAX_ROW-1;
    fstage = 0;
  }
  
  mx.clear();
  
  if(fstage < 8) {
    // Rising
    mx.setPoint(fy, fx, true);
    fy--;
    if(fy < 2) fstage = 8;
  } else if(fstage < 16) {
    // Explosion
    int radius = (fstage - 8) / 2;
    for(int i = 0; i < 8; i++) {
      int x = fx + radius * cos(i * PI/4);
      int y = fy + radius * sin(i * PI/4);
      if(x >= 0 && x < MAX_COL && y >= 0 && y < MAX_ROW) {
        mx.setPoint(y, x, true);
      }
    }
    fstage++;
  } else {
    fx = -1; // Reset
  }
}

void falling_stars() {
  static uint8_t stars[5][2];  // [x,y] for 5 stars
  static bool star_active[5] = {false, false, false, false, false};
  
  mx.clear();
  
  for(int i = 0; i < 5; i++) {
    if(!star_active[i] && random(20) == 0) {
      stars[i][0] = random(MAX_COL);
      stars[i][1] = 0;
      star_active[i] = true;
    }
    
    if(star_active[i]) {
      mx.setPoint(stars[i][1], stars[i][0], true);
      stars[i][1]++;
      
      if(stars[i][1] >= MAX_ROW) {
        star_active[i] = false;
      }
    }
  }
}

void rotating_lines() {
  static float angle = 0;
  int centerX = MAX_COL/2;
  int centerY = MAX_ROW/2;
  
  mx.clear();
  
  for(int i = 0; i < 4; i++) {
    float currentAngle = angle + (i * PI/2);
    int x = centerX + 6 * cos(currentAngle);
    int y = centerY + 6 * sin(currentAngle);
    mx.setPoint(y, x, true);
    mx.setPoint(centerY, centerX, true);
  }
  
  angle += 0.2;
}

void expanding_squares() {
  static uint8_t size = 0;
  static bool expanding = true;
  int centerX = MAX_COL/2;
  int centerY = MAX_ROW/2;
  
  mx.clear();
  
  for(int i = -size; i <= size; i++) {
    for(int j = -size; j <= size; j++) {
      if(abs(i) == size || abs(j) == size) {
        int x = centerX + i;
        int y = centerY + j;
        if(x >= 0 && x < MAX_COL && y >= 0 && y < MAX_ROW) {
          mx.setPoint(y, x, true);
        }
      }
    }
  }
  
  if(expanding) {
    size++;
    if(size >= 4) expanding = false;
  } else {
    size--;
    if(size == 0) expanding = true;
  }
}

void zigzag_pattern() {
  static uint8_t pos = 0;
  static bool up = true;
  
  mx.clear();
  
  for(int i = 0; i < MAX_COL; i++) {
    int y = (i % 2 == 0) ? pos : (MAX_ROW-1 - pos);
    mx.setPoint(y, i, true);
  }
  
  if(up) {
    pos++;
    if(pos >= MAX_ROW-1) up = false;
  } else {
    pos--;
    if(pos == 0) up = true;
  }
}

void random_walk() {
  static int8_t x = MAX_COL/2;
  static int8_t y = MAX_ROW/2;
  
  // Add new position
  if(x >= 0 && x < MAX_COL && y >= 0 && y < MAX_ROW) {
    mx.setPoint(y, x, true);
  }
  
  // Random movement
  x += random(3) - 1;  // -1, 0, or 1
  y += random(3) - 1;
  
  // Keep within bounds
  x = constrain(x, 0, MAX_COL-1);
  y = constrain(y, 0, MAX_ROW-1);
}

void pulsing_circles() {
  static uint8_t phase = 0;
  static bool expanding = true;
  int centerX = MAX_COL/2;
  int centerY = MAX_ROW/2;
  
  mx.clear();
  
  for(int i = 0; i <= phase; i += 2) {
    for(int x = 0; x < MAX_COL; x++) {
      for(int y = 0; y < MAX_ROW; y++) {
        if(round(sqrt(pow(x-centerX, 2) + pow(y-centerY, 2))) == i) {
          mx.setPoint(y, x, true);
        }
      }
    }
  }
  
  if(expanding) {
    phase++;
    if(phase >= 8) expanding = false;
  } else {
    phase--;
    if(phase == 0) expanding = true;
  }
}

void diagonal_wipe() {
  static int8_t line = -MAX_COL;
  static bool forward = true;
  
  mx.clear();
  
  for(int x = 0; x < MAX_COL; x++) {
    for(int y = 0; y < MAX_ROW; y++) {
      if(x + y == line + MAX_COL) {
        mx.setPoint(y, x, true);
      }
    }
  }
  
  if(forward) {
    line++;
    if(line >= MAX_COL) forward = false;
  } else {
    line--;
    if(line <= -MAX_COL) forward = true;
  }
}

void corner_fill() {
  static uint8_t stage = 0;
  static uint8_t corner = 0;
  
  if(stage == 0) {
    mx.clear();
  }
  
  int startX = (corner & 1) ? MAX_COL-1 : 0;
  int startY = (corner & 2) ? MAX_ROW-1 : 0;
  int dirX = (corner & 1) ? -1 : 1;
  int dirY = (corner & 2) ? -1 : 1;
  
  for(int i = 0; i <= stage; i++) {
    int x = startX + (dirX * i);
    if(x >= 0 && x < MAX_COL) {
      for(int j = 0; j <= stage; j++) {
        int y = startY + (dirY * j);
        if(y >= 0 && y < MAX_ROW) {
          mx.setPoint(y, x, true);
        }
      }
    }
  }
  
  stage++;
  if(stage >= 8) {
    stage = 0;
    corner = (corner + 1) % 4;
  }
}

void spinning_windmill() {
  static float angle = 0;
  int centerX = MAX_COL/2;
  int centerY = MAX_ROW/2;
  
  mx.clear();
  
  for(int i = 0; i < 4; i++) {
    float currentAngle = angle + (i * PI/2);
    for(int r = 0; r < 8; r++) {
      int x = centerX + r * cos(currentAngle);
      int y = centerY + r * sin(currentAngle);
      if(x >= 0 && x < MAX_COL && y >= 0 && y < MAX_ROW) {
        mx.setPoint(y, x, true);
      }
    }
  }
  
  angle += 0.2;
}

void diamond_pattern() {
  static uint8_t offset = 0;
  
  mx.clear();
  
  for(int i = 0; i < MAX_COL; i += 4) {
    for(int j = 0; j < MAX_ROW; j += 4) {
      int x = (i + offset) % MAX_COL;
      int y = (j + offset) % MAX_ROW;
      mx.setPoint(y, x, true);
      if(x+1 < MAX_COL) mx.setPoint(y, x+1, true);
      if(y+1 < MAX_ROW) mx.setPoint(y+1, x, true);
    }
  }
  
  offset = (offset + 1) % 4;
}

void alternating_columns() {
  static bool toggle = false;
  static uint8_t offset = 0;
  
  mx.clear();
  
  for(int x = 0; x < MAX_COL; x++) {
    if((x + offset) % 2 == 0) {
      for(int y = 0; y < MAX_ROW; y++) {
        mx.setPoint(y, x, toggle);
      }
    } else {
      for(int y = 0; y < MAX_ROW; y++) {
        mx.setPoint(y, x, !toggle);
      }
    }
  }
  
  offset++;
  if(offset >= 2) {
    offset = 0;
    toggle = !toggle;
  }
}

void bounce_and_split() {
  static int8_t x = 0;
  static int8_t dx = 1;
  static uint8_t split = 0;
  
  mx.clear();
  
  for(int i = 0; i <= split; i++) {
    int y1 = (MAX_ROW/2) - i;
    int y2 = (MAX_ROW/2) + i;
    if(y1 >= 0) mx.setPoint(y1, x, true);
    if(y2 < MAX_ROW) mx.setPoint(y2, x, true);
  }
  
  x += dx;
  
  if(x >= MAX_COL-1) {
    dx = -1;
    split = min(split + 1, MAX_ROW/2);
  } else if(x <= 0) {
    dx = 1;
    split = min(split + 1, MAX_ROW/2);
  }
}

void rotating_triangles() {
  static float angle = 0;
  int centerX = MAX_COL/2;
  int centerY = MAX_ROW/2;
  
  mx.clear();
  
  for(int i = 0; i < 3; i++) {
    float currentAngle = angle + (i * 2*PI/3);
    int x = centerX + 4 * cos(currentAngle);
    int y = centerY + 4 * sin(currentAngle);
    if(x >= 0 && x < MAX_COL && y >= 0 && y < MAX_ROW) {
      mx.setPoint(y, x, true);
    }
  }
  
  angle += 0.2;
}

void matrix_rain() {
  static uint8_t drops[MAX_COL];
  static bool active[MAX_COL];
  
  for(int i = 0; i < MAX_COL; i++) {
    if(!active[i] && random(10) == 0) {
      active[i] = true;
      drops[i] = 0;
    }
    
    if(active[i]) {
      if(drops[i] > 0) mx.setPoint(drops[i]-1, i, false);
      if(drops[i] < MAX_ROW) mx.setPoint(drops[i], i, true);
      drops[i]++;
      if(drops[i] >= MAX_ROW + 1) active[i] = false;
    }
  }
}

void crosshatch() {
  static uint8_t phase = 0;
  
  mx.clear();
  
  // Vertical lines
  for(int x = phase % 4; x < MAX_COL; x += 4) {
    for(int y = 0; y < MAX_ROW; y++) {
      mx.setPoint(y, x, true);
    }
  }
  
  // Horizontal lines
  for(int y = ((phase + 2) % 4); y < MAX_ROW; y += 4) {
    for(int x = 0; x < MAX_COL; x++) {
      mx.setPoint(y, x, true);
    }
  }
  
  phase = (phase + 1) % 4;
}

void spinning_spiral() {
  static float angle = 0;
  static uint8_t length = 0;
  int centerX = MAX_COL/2;
  int centerY = MAX_ROW/2;
  
  mx.clear();
  
  for(int i = 0; i < length; i++) {
    float currentAngle = angle + (i * 0.5);
    int x = centerX + i * cos(currentAngle) / 2;
    int y = centerY + i * sin(currentAngle) / 2;
    if(x >= 0 && x < MAX_COL && y >= 0 && y < MAX_ROW) {
      mx.setPoint(y, x, true);
    }
  }
  
  angle += 0.2;
  length = (length + 1) % 16;
}

void exploding_pixels() {
  static uint8_t stage = 0;
  static uint8_t pixels[8][2];  // Store positions of 8 pixels
  
  if(stage == 0) {
    // Initialize pixels at center
    for(int i = 0; i < 8; i++) {
      pixels[i][0] = MAX_COL/2;
      pixels[i][1] = MAX_ROW/2;
    }
  }
  
  mx.clear();
  
  // Move pixels outward
  for(int i = 0; i < 8; i++) {
    float angle = i * PI/4;
    pixels[i][0] = MAX_COL/2 + (stage * cos(angle));
    pixels[i][1] = MAX_ROW/2 + (stage * sin(angle));
    
    if(pixels[i][0] >= 0 && pixels[i][0] < MAX_COL && 
       pixels[i][1] >= 0 && pixels[i][1] < MAX_ROW) {
      mx.setPoint(pixels[i][1], pixels[i][0], true);
    }
  }
  
  stage++;
  if(stage >= 8) stage = 0;
}

void loop() {
  static uint8_t currentAnimation = 0;
  static unsigned long lastChange = 0;
  
  if(millis() - lastChange > 3000) { // Change animation every 3 seconds
    currentAnimation = (currentAnimation + 1) % 30; // Cycle through all 30 animations
    lastChange = millis();
    mx.clear();
  }
  
  switch(currentAnimation) {
    case 0: bouncing_ball(); break;
    case 1: expanding_circles(); break;
    case 2: rain(); break;
    case 3: wave_pattern(); break;
    case 4: spiral(); break;
    case 5: starburst(); break;
    case 6: random_sparkles(); break;
    case 7: checkerboard(); break;
    case 8: scanner(); break;
    case 9: wave_pattern(); break;
    case 10: double_bouncing_balls(); break;
    case 11: snake_pattern(); break;
    case 12: fireworks(); break;
    case 13: falling_stars(); break;
    case 14: rotating_lines(); break;
    case 15: expanding_squares(); break;
    case 16: zigzag_pattern(); break;
    case 17: random_walk(); break;
    case 18: pulsing_circles(); break;
    case 19: diagonal_wipe(); break;
    case 20: corner_fill(); break;
    case 21: spinning_windmill(); break;
    case 22: diamond_pattern(); break;
    case 23: alternating_columns(); break;
    case 24: bounce_and_split(); break;
    case 25: rotating_triangles(); break;
    case 26: matrix_rain(); break;
    case 27: crosshatch(); break;
    case 28: spinning_spiral(); break;
    case 29: exploding_pixels(); break;
  }
  
  delay(ANIMATION_DELAY);
}
